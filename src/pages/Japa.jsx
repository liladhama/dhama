import React, { useState, useRef, useEffect } from 'react';

const MANTRAS = [
  {
    id: 1,
    name: '–û–º',
    sanskrit: '‡•ê',
    audio: '/audio/om.mp3'
  },
  {
    id: 2,
    name: '–û–º –î—É–º –î—É—Ä–≥–∞–π–µ –ù–∞–º–∞—Ö–∞',
    sanskrit: '‡•ê ‡§¶‡•Å‡§Ç ‡§¶‡•Å‡§∞‡•ç‡§ó‡§æ‡§Ø‡•à ‡§®‡§Æ‡§É',
    audio: '/audio/om-dum-durgaye-namaha.mp3'
  }
];

export default function Japa() {
  const [isActive, setIsActive] = useState(false);
  const [selectedMantra, setSelectedMantra] = useState(MANTRAS[0]);
  const [isExpanded, setIsExpanded] = useState(false);
  const [breathPhase, setBreathPhase] = useState('inhale'); // 'inhale' –∏–ª–∏ 'exhale'
  const [count, setCount] = useState(0);
  const [recognizedCount, setRecognizedCount] = useState(0); // –°—á–µ—Ç—á–∏–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –º–∞–Ω—Ç—Ä
  const [circleScale, setCircleScale] = useState(1);
  const [isListening, setIsListening] = useState(false);
  const [micPermission, setMicPermission] = useState(null); // null, 'granted', 'denied'
  
  const intervalRef = useRef(null);
  const audioRef = useRef(null);
  const recognitionRef = useRef(null);

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const requestMicPermission = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        setMicPermission('granted');
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫, –æ–Ω –Ω–∞–º –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω
        stream.getTracks().forEach(track => track.stop());
        console.log('üé§ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–æ');
      } catch (error) {
        setMicPermission('denied');
        console.error('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:', error);
      }
    };

    requestMicPermission();
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      
      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true; // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      recognitionRef.current.lang = 'ru-RU';
      recognitionRef.current.maxAlternatives = 1;
      
      recognitionRef.current.onstart = () => {
        setIsListening(true);
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞—á–∞—Ç–æ');
      };
      
      recognitionRef.current.onend = () => {
        setIsListening(false);
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (isActive) {
          setTimeout(() => {
            if (recognitionRef.current && isActive) {
              try {
                recognitionRef.current.start();
              } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
              }
            }
          }, 100);
        }
      };
      
      recognitionRef.current.onresult = (event) => {
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript.toLowerCase().trim();
          console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', transcript, 'Final:', event.results[i].isFinal);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ)
          if (transcript.length > 0) {
            // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–∞–Ω—Ç—Ä
            const mantraKeywords = ['–æ–º', '—É–º', '–∞—É–º', '–¥—É–º', '–¥—É—Ä–≥–∞', '–Ω–∞–º–∞—Ö–∞', '–Ω–∞–º–∞—Ö'];
            const hasMantraWord = mantraKeywords.some(keyword => transcript.includes(keyword));
            
            if (hasMantraWord && event.results[i].isFinal) {
              setRecognizedCount(prev => prev + 1);
              console.log('‚úÖ –ú–∞–Ω—Ç—Ä–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞! –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', transcript);
            }
          }
        }
      };
      
      recognitionRef.current.onerror = (event) => {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
        setIsListening(false);
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
        if (event.error === 'no-speech' || event.error === 'aborted') {
          setTimeout(() => {
            if (recognitionRef.current && isActive && breathPhase === 'exhale') {
              try {
                recognitionRef.current.start();
              } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', e);
              }
            }
          }, 500);
        }
      };
    }
  };

  const breatheCycle = () => {
    // –í–¥–æ—Ö - 4 —Å–µ–∫—É–Ω–¥—ã
    setBreathPhase('inhale');
    setCircleScale(1.5);
    
    setTimeout(() => {
      // –í—ã–¥–æ—Ö - 10 —Å–µ–∫—É–Ω–¥ + –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞–Ω—Ç—Ä—ã
      setBreathPhase('exhale');
      setCircleScale(1);
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º–∞–Ω—Ç—Ä—É –Ω–∞ –≤—ã–¥–æ—Ö–µ
      if (audioRef.current) {
        audioRef.current.play().catch(e => console.log('Audio play failed:', e));
      }
      
      setCount(prev => prev + 1);
    }, 4000);
  };

  const startPractice = () => {
    if (isActive) return;
    
    setIsActive(true);
    setCount(0);
    setRecognizedCount(0);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    initSpeechRecognition();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (recognitionRef.current && micPermission === 'granted') {
      setTimeout(() => {
        try {
          recognitionRef.current.start();
          console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–∞–∫—Ç–∏–∫–∏');
        } catch (e) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω:', e);
        }
      }, 500);
    }
    
    breatheCycle(); // –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª
    
    intervalRef.current = setInterval(() => {
      breatheCycle();
    }, 14000); // 14 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª (4 –≤–¥–æ—Ö + 10 –≤—ã–¥–æ—Ö)
  };

  const stopPractice = () => {
    setIsActive(false);
    clearInterval(intervalRef.current);
    intervalRef.current = null;
    setCircleScale(1);
    setBreathPhase('inhale');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    setIsListening(false);
    
    const payload = { 
      type: 'japa', 
      totalCycles: count,
      recognizedMantras: recognizedCount,
      mantra: selectedMantra.name,
      time: Date.now() 
    };
    
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.sendData(JSON.stringify(payload));
    }
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∞–∫—Ç–∏–∫–∏:', payload);
  };

  const playMantra = (mantra) => {
    if (audioRef.current) {
      audioRef.current.src = mantra.audio;
      audioRef.current.play().catch(e => console.log('Audio play failed:', e));
    }
  };

  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (e) {
          console.log('Recognition already stopped');
        }
      }
    };
  }, []);

  return (
    <div className="p-6 min-h-screen bg-amber-50 text-gray-800">
      <h2 className="text-3xl font-bold text-center mb-8 text-amber-700">–î–∂–∞–ø–∞-–º–µ–¥–∏—Ç–∞—Ü–∏—è</h2>
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–µ */}
      {micPermission === 'denied' && (
        <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="text-red-500 mr-3">‚ùå</div>
            <div className="text-sm text-red-700">
              <strong>–û—à–∏–±–∫–∞:</strong> –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. 
              –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–∞–Ω—Ç—Ä.
            </div>
          </div>
        </div>
      )}
      
      {micPermission === 'granted' && !isActive && (
        <div className="mb-6 bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="text-green-500 mr-3">‚úÖ</div>
            <div className="text-sm text-green-700">
              <strong>–ì–æ—Ç–æ–≤–æ:</strong> –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω! 
              –ú—ã –±—É–¥–µ–º –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –º–∞–Ω—Ç—Ä—ã.
            </div>
          </div>
        </div>
      )}
      
      {micPermission === null && (
        <div className="mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="text-blue-500 mr-3">üé§</div>
            <div className="text-sm text-blue-700">
              <strong>–ó–∞–ø—Ä–æ—Å:</strong> –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–∞–Ω—Ç—Ä...
            </div>
          </div>
        </div>
      )}
      
      {/* –í—ã–±–æ—Ä –º–∞–Ω—Ç—Ä—ã */}
      <div className="mb-8">
        <div 
          className="bg-amber-25 shadow-lg border border-amber-200 rounded-lg p-4 cursor-pointer hover:shadow-xl transition-all"
          style={{ backgroundColor: '#fffbeb' }}
          onClick={() => setIsExpanded(!isExpanded)}
        >
          <div className="flex justify-between items-center">
            <div>
              <div className="font-semibold text-gray-700">{selectedMantra.name}</div>
              <div className="text-2xl text-amber-700 mt-1">{selectedMantra.sanskrit}</div>
            </div>
            <svg 
              className={`w-6 h-6 transform transition-transform text-amber-400 ${isExpanded ? 'rotate-180' : ''}`}
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
        
        {isExpanded && (
          <div className="mt-2 shadow-lg border border-amber-200 rounded-lg overflow-hidden" style={{ backgroundColor: '#fffbeb' }}>
            {MANTRAS.map((mantra) => (
              <div 
                key={mantra.id}
                className={`p-4 cursor-pointer hover:bg-amber-100 flex justify-between items-center border-b border-amber-100 last:border-b-0 ${
                  selectedMantra.id === mantra.id ? 'bg-amber-100' : ''
                }`}
                onClick={() => {
                  setSelectedMantra(mantra);
                  setIsExpanded(false);
                }}
              >
                <div>
                  <div className="font-semibold text-gray-700">{mantra.name}</div>
                  <div className="text-xl text-amber-700 mt-1">{mantra.sanskrit}</div>
                </div>
                <button
                  className="p-2 bg-amber-200 hover:bg-amber-300 rounded-full transition-all"
                  onClick={(e) => {
                    e.stopPropagation();
                    playMantra(mantra);
                  }}
                >
                  <svg className="w-5 h-5 text-amber-700" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </button>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä—É–≥ */}
      <div className="flex flex-col items-center mb-8">
        <div className="relative mb-4">
          <div 
            className={`w-48 h-48 rounded-full border-4 border-amber-500 flex items-center justify-center cursor-pointer transition-all ease-in-out ${
              isActive ? 'bg-amber-200 shadow-2xl' : 'shadow-lg'
            } ${breathPhase === 'inhale' ? 'duration-[4000ms]' : 'duration-[10000ms]'}`}
            style={{ 
              transform: `scale(${circleScale})`,
              backgroundColor: isActive ? '#fde68a' : '#fffbeb',
              boxShadow: isActive ? '0 0 40px rgba(245, 158, 11, 0.4)' : '0 10px 25px rgba(0, 0, 0, 0.1)'
            }}
            onClick={isActive ? stopPractice : startPractice}
          >
            <div className="text-center">
              {isActive ? (
                <div>
                  <div className="text-3xl font-bold mb-1 text-amber-700">{count}</div>
                  <div className="text-sm text-gray-500 mb-2">—Ü–∏–∫–ª–æ–≤</div>
                  <div className="text-2xl font-bold mb-1 text-green-600">{recognizedCount}</div>
                  <div className="text-sm text-gray-500 mb-2">–º–∞–Ω—Ç—Ä</div>
                  <div className="text-lg text-gray-600">
                    {breathPhase === 'inhale' ? '–í–¥–æ—Ö' : '–í—ã–¥–æ—Ö'}
                  </div>
                  {isListening && (
                    <div className="text-xs text-red-500 mt-1">üé§ –°–ª—É—à–∞—é...</div>
                  )}
                </div>
              ) : (
                <div className="text-2xl font-semibold text-gray-700">–ù–∞—á–∞—Ç—å</div>
              )}
            </div>
          </div>
        </div>
        
        <div className="text-center text-sm text-gray-600 max-w-xs">
          {isActive ? (
            <p>
              –°–ª–µ–¥—É–π—Ç–µ —Ä–∏—Ç–º—É –¥—ã—Ö–∞–Ω–∏—è. –ù–∞ –≤—ã–¥–æ—Ö–µ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –º–∞–Ω—Ç—Ä—É –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω 
              <br />
              <span className="text-green-600 font-semibold">
                –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {recognizedCount} –∏–∑ {count}
              </span>
            </p>
          ) : (
            <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä—É–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É —Å –º–∞–Ω—Ç—Ä–æ–π. –ú—ã –±—É–¥–µ–º –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω!</p>
          )}
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {(count > 0 || recognizedCount > 0) && (
        <div className="text-center shadow-lg border border-amber-200 rounded-lg p-4" style={{ backgroundColor: '#fffbeb' }}>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <div className="text-2xl font-bold text-amber-700 mb-1">{count}</div>
              <div className="text-sm text-gray-600">–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600 mb-1">{recognizedCount}</div>
              <div className="text-sm text-gray-600">–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –º–∞–Ω—Ç—Ä</div>
            </div>
          </div>
          {recognizedCount > 0 && (
            <div className="mt-3 text-xs text-green-700 bg-green-50 px-3 py-2 rounded-full">
              üéâ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {Math.round((recognizedCount / count) * 100)}%
            </div>
          )}
        </div>
      )}

      {/* –°–∫—Ä—ã—Ç—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç */}
      <audio ref={audioRef} preload="none" />
    </div>
  );
}
